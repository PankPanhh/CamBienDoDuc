import tkinter as tk
# Import ttkbootstrap as b
import ttkbootstrap as b
import serial
import time
import os
import threading
from datetime import datetime
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import re
import sqlite3
from collections import deque
from urllib.parse import urlencode
import urllib.request
import ssl
try:
    import certifi
    HAS_CERTIFI = True
except Exception:
    HAS_CERTIFI = False

# L·ªõp C·ª≠a s·ªï L·ªãch s·ª≠ (ƒê√£ n√¢ng c·∫•p l√™n ttkbootstrap)
class HistoryWindow(tk.Toplevel):
    def __init__(self, master=None):
        super().__init__(master)
        self.title("L·ªãch s·ª≠ ƒêo ƒê·ªô ƒë·ª•c")
        self.geometry("600x400")

        # S·ª≠ d·ª•ng b.Frame
        frame = b.Frame(self, padding=10)
        frame.pack(fill="both", expand=True)

        columns = ("timestamp", "voltage", "turbidity", "status")
        # S·ª≠ d·ª•ng b.Treeview
        self.tree = b.Treeview(frame, columns=columns, show="headings", bootstyle='primary')
        self.tree.heading("timestamp", text="Th·ªùi gian")
        self.tree.heading("voltage", text="ƒêi·ªán √°p (mV)")
        self.tree.heading("turbidity", text="ƒê·ªô ƒë·ª•c (NTU)")
        self.tree.heading("status", text="Tr·∫°ng th√°i")
        self.tree.column("timestamp", width=150, anchor=tk.W)
        self.tree.column("voltage", width=100, anchor=tk.CENTER)
        self.tree.column("turbidity", width=100, anchor=tk.CENTER)
        self.tree.column("status", width=120, anchor=tk.W)

        # S·ª≠ d·ª•ng b.Scrollbar
        scrollbar = b.Scrollbar(frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.tree.grid(row=0, column=0, sticky="nsew")
        scrollbar.grid(row=0, column=1, sticky="ns")
        frame.rowconfigure(0, weight=1)
        frame.columnconfigure(0, weight=1)

        # X√≥a tag_configure, thay b·∫±ng bootstyle tags trong load_data
        
        button_frame = b.Frame(self, padding=(0, 10))
        button_frame.pack(fill="x")
        
        # S·ª≠ d·ª•ng b.Button
        b.Button(button_frame, text="L√†m m·ªõi", command=self.load_data, bootstyle='primary').pack(side="left", padx=10)
        b.Button(button_frame, text="ƒê√≥ng", command=self.destroy, bootstyle='secondary').pack(side="right", padx=10)
        
        self.load_data()

    def load_data(self):
        for item in self.tree.get_children():
            self.tree.delete(item)
        try:
            db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "turbidity.db")
            conn = sqlite3.connect(db_path)
            cur = conn.cursor()
            cur.execute("SELECT ts, voltage, turbidity, status FROM readings ORDER BY id DESC LIMIT 500")
            rows = cur.fetchall()
            conn.close()
            for ts, voltage, turbidity, status in rows:
                status_key = (status or "").replace(" ", "_").lower()
                
                # S·ª≠ d·ª•ng bootstyle tags cho Treeview
                status_tag = "default"
                if "c·∫•t" in status_key: status_tag = 'success'
                elif "trong" in status_key: status_tag = 'info'
                elif "h∆°i_ƒë·ª•c" in status_key: status_tag = 'warning'
                elif "ƒë·ª•c" in status_key and "r·∫•t" not in status_key: status_tag = 'danger'
                elif "r·∫•t_ƒë·ª•c" in status_key or "r·∫•t" in status_key: status_tag = 'danger'
                
                self.tree.insert("", tk.END, values=(ts, round(voltage), round(turbidity, 2), status), tags=(status_tag,))
        except Exception as e:
            self.tree.insert("", tk.END, values=(f"L·ªói t·∫£i l·ªãch s·ª≠: {e}", "", "", ""))


# ƒê√£ X√ìA l·ªõp GaugeWidget t√πy ch·ªânh theo y√™u c·∫ßu

# Giao di·ªán ch√≠nh
class TurbiditySensorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Dashboard Gi√°m s√°t ƒê·ªô ƒë·ª•c N∆∞·ªõc")
        self.root.geometry("850x700")
        self.root.resizable(True, True)

        self.serial_connection = None
        self.is_running = False
        self.turbidity_data = []
        self.timestamps = []
        self.history_win = None
        
        self.last_log_time = None
        self.log_interval = 3600  # 1 gi·ªù (3600 gi√¢y)
        self.last_turbidity = None
        self.last_voltage = None

        self.current_alert_level = 0
        self.recent_samples = deque(maxlen=120)  # store last ~2 minutes assuming ~1s sample
        self.last_command_sent_at = 0
        self.last_command_type = None
        self.last_notify_at = 0

        # Settings
        self.DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "turbidity.db")
        self.TELEGRAM_MIN_INTERVAL_SEC = 60  # gi·ªØ cooldown chung; tr·∫°ng th√°i thay ƒë·ªïi s·∫Ω b·ªè qua
        self.TREND_WINDOW_SEC = 60
        self.TREND_ALERT_SLOPE = 30.0  # NTU per minute
        self.TREND_LINE_WINDOW_SEC = 300  # c·ª≠a s·ªï hi·ªÉn th·ªã ƒë∆∞·ªùng xu h∆∞·ªõng tr√™n bi·ªÉu ƒë·ªì
        self.TREND_ROLLING_WINDOW_SEC = 60  # c·ª≠a s·ªï lƒÉn cho ƒë∆∞·ªùng xu h∆∞·ªõng (t·∫°o g·∫•p kh√∫c)
        # C·∫£nh b√°o t·ªëc ƒë·ªô thay ƒë·ªïi ng·∫Øn h·∫°n (1-2 ph√∫t)
        self.RATE_WINDOW_SEC = 60             # c·ª≠a s·ªï 1 ph√∫t (c√≥ th·ªÉ tƒÉng 120s n·∫øu c·∫ßn)
        self.RATE_ALERT_SLOPE = 20.0          # NTU/ph√∫t
        self.RATE_MIN_DELTA = 10.0            # thay ƒë·ªïi t·ªëi thi·ªÉu trong c·ª≠a s·ªï
        self.RATE_MIN_POINTS = 3              # t·ªëi thi·ªÉu s·ªë ƒëi·ªÉm trong c·ª≠a s·ªï
        self.RATE_ALERT_COOLDOWN_SEC = 60     # tr√°nh spam c·∫£nh b√°o ng·∫Øn h·∫°n
        self.last_rate_alert_at = 0.0

        # X√≥a create_styles()
        self.create_widgets()
        # ƒê∆∞·ªùng d·∫´n file .env ƒë·ªÉ l∆∞u c√†i ƒë·∫∑t Telegram (kh√¥ng commit)
        self.config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), ".env")
        self.telegram_token = None
        self.telegram_chat_id = None
        self.load_env_settings()

        self.connect_to_arduino()
        self.init_db()
        self.periodic_log()

    # ƒê√£ X√ìA h√†m create_styles(self)

    def create_widgets(self):
        # S·ª≠ d·ª•ng b.Frame
        main_frame = b.Frame(self.root, padding=20)
        main_frame.pack(fill="both", expand=True)
        main_frame.columnconfigure(0, weight=1)
        
        # S·ª≠ d·ª•ng b.Label
        header_label = b.Label(main_frame, text="Dashboard Gi√°m s√°t ƒê·ªô ƒë·ª•c N∆∞·ªõc", font=("Arial", 28, "bold"))
        header_label.grid(row=0, column=0, pady=(0, 10))
        
        status_controls_frame = b.Frame(main_frame)
        status_controls_frame.grid(row=1, column=0, sticky="ew", pady=10)
        status_controls_frame.columnconfigure(0, weight=1)
        status_controls_frame.columnconfigure(1, weight=0)
        
        # S·ª≠ d·ª•ng b.Label
        self.status_label = b.Label(status_controls_frame, text="ƒêang k·∫øt n·ªëi t·ªõi Arduino...", font=("Arial", 11))
        self.status_label.grid(row=0, column=0, sticky="w", padx=10)
        
        button_frame = b.Frame(status_controls_frame)
        button_frame.grid(row=0, column=1, sticky="e")
        
        # S·ª≠ d·ª•ng b.Button v·ªõi bootstyle='primary'
        self.start_button = b.Button(button_frame, text="B·∫Øt ƒë·∫ßu", command=self.start_monitoring, bootstyle='primary')
        self.start_button.pack(side="left", padx=5)
        self.stop_button = b.Button(button_frame, text="D·ª´ng l·∫°i", command=self.stop_monitoring, state=tk.DISABLED, bootstyle='primary')
        self.stop_button.pack(side="left", padx=5)
        self.connect_button = b.Button(button_frame, text="K·∫øt n·ªëi l·∫°i", command=self.connect_to_arduino, bootstyle='primary')
        self.connect_button.pack(side="left", padx=5)
        self.history_button = b.Button(button_frame, text="L·ªãch s·ª≠ ƒëo", command=self.open_history_window, bootstyle='primary')
        self.history_button.pack(side="left", padx=5)

        gauge_frame = b.Frame(main_frame)
        gauge_frame.grid(row=2, column=0, pady=20)
        
        # Ttkbootstrap Meter widget thay th·∫ø GaugeWidget t√πy ch·ªânh
        self.turbidity_gauge = b.Meter(
            gauge_frame,
            metersize=250,
            amounttotal=1000,
            amountused=0,
            subtext="NTU",
            bootstyle='info',
            interactive=False,
            stripethickness=10
        )
        self.turbidity_gauge.pack()

        cards_frame = b.Frame(main_frame)
        cards_frame.grid(row=3, column=0, sticky="ew", pady=10)
        cards_frame.columnconfigure([0, 1], weight=1)

        # Card Tr·∫°ng th√°i N∆∞·ªõc v·ªõi b·ªë c·ª•c c·∫£i ti·∫øn
        status_card = b.Frame(cards_frame, bootstyle='secondary', padding=20)
        status_card.grid(row=0, column=0, sticky="nsew", padx=10)
        
        b.Label(status_card, text="üåä Tr·∫°ng th√°i N∆∞·ªõc", font=("Arial", 16, "bold")).pack(pady=(0, 10))
        
        # H√†ng hi·ªÉn th·ªã tr·∫°ng th√°i
        status_row = b.Frame(status_card, bootstyle='secondary')
        status_row.pack(pady=10)
        
        # Ch·ªâ b√°o m√†u v·ªõi n·ªÅn kh·ªõp theme darkly
        self.status_indicator = tk.Canvas(status_row, width=18, height=18, bg="#2b3e50", highlightthickness=0)
        self.status_indicator_circle = self.status_indicator.create_oval(3, 3, 15, 15, fill="#6B7280", outline="#2b3e50")
        self.status_indicator.pack(side="left", padx=(0, 8))
        
        # Nh√£n tr·∫°ng th√°i v·ªõi font l·ªõn
        self.water_status_label = b.Label(status_row, text="--", font=("Arial", 24, "bold"))
        self.water_status_label.pack(side="left")

        # Card ƒêi·ªán √°p v·ªõi b·ªë c·ª•c c·∫£i ti·∫øn
        volt_card = b.Frame(cards_frame, bootstyle='secondary', padding=20)
        volt_card.grid(row=0, column=1, sticky="nsew", padx=10)
        
        b.Label(volt_card, text="‚ö° ƒêi·ªán √°p C·∫£m bi·∫øn", font=("Arial", 16, "bold")).pack(pady=(0, 10))
        
        # Nh√£n ƒëi·ªán √°p v·ªõi font l·ªõn
        self.voltage_label = b.Label(volt_card, text="-- V", font=("Arial", 24, "bold"))
        self.voltage_label.pack(pady=10)
        
        # Card Bi·ªÉu ƒë·ªì
        self.graph_frame = b.Frame(main_frame, bootstyle='secondary', padding=20)
        self.graph_frame.grid(row=4, column=0, pady=20, padx=10, sticky="nsew")
        main_frame.rowconfigure(4, weight=1)

        # C·∫•u h√¨nh bi·ªÉu ƒë·ªì v·ªõi m√†u s·∫Øc ph√π h·ª£p cho theme darkly
        self.figure = Figure(figsize=(6, 4), dpi=100, facecolor="#2b3e50")
        self.ax = self.figure.add_subplot(111)
        self.ax.set_title("L·ªãch s·ª≠ ƒê·ªô ƒë·ª•c (50 ƒëi·ªÉm g·∫ßn nh·∫•t)", color="#ffffff")
        self.ax.set_xlabel("Th·ªùi gian", color="#ffffff")
        self.ax.set_ylabel("NTU", color="#ffffff")
        self.ax.tick_params(axis='x', colors="#ffffff")
        self.ax.tick_params(axis='y', colors="#ffffff")
        self.ax.grid(True, linestyle='--', alpha=0.3, color="#52667a")
        self.ax.set_facecolor("#1e2d3d")
        for spine in self.ax.spines.values(): 
            spine.set_edgecolor("#52667a")
        
        # L∆∞u m√†u primary v√† warning t·ª´ theme ƒë·ªÉ d√πng cho bi·ªÉu ƒë·ªì
        self.line, = self.ax.plot([], [], color='#3b8fd6', marker='o', markersize=3, linewidth=2)
        self.trend_line, = self.ax.plot([], [], color='#f39c12', linestyle='--', linewidth=2, alpha=0.9)
        
        self.figure.tight_layout()
        self.canvas_graph = FigureCanvasTkAgg(self.figure, master=self.graph_frame)
        self.canvas_graph.get_tk_widget().pack(fill="both", expand=True, padx=10, pady=10)
        # =======================================

    def open_history_window(self):
        if self.history_win is None or not self.history_win.winfo_exists():
            # X√≥a tham s·ªë 'colors'
            self.history_win = HistoryWindow(self.root)
            self.history_win.transient(self.root)
        else:
            self.history_win.lift() 
    
    def connect_to_arduino(self):
        try:
            ports = ['COM3', 'COM4', 'COM5', '/dev/ttyUSB0', '/dev/ttyACM0', '/dev/ttyS0']
            for port in ports:
                try:
                    # TƒÉng th·ªùi gian ch·ªù (sleep) sau khi k·∫øt n·ªëi
                    self.serial_connection = serial.Serial(port=port, baudrate=9600, timeout=1, write_timeout=1)
                    print(f"Opening port {port}...")
                    time.sleep(2) # Cho Arduino th·ªùi gian kh·ªüi ƒë·ªông l·∫°i
                    # X√≥a b·ªô ƒë·ªám input v·ªõi API m·ªõi; fallback t∆∞∆°ng th√≠ch n·∫øu c·∫ßn
                    try:
                        reset_fn = getattr(self.serial_connection, "reset_input_buffer", None)
                        if callable(reset_fn):
                            reset_fn()
                        else:
                            flush_fn = getattr(self.serial_connection, "flushInput", None)
                            if callable(flush_fn):
                                flush_fn()
                    except Exception:
                        pass
                    print(f"Port {port} opened. Flushing input.")
                    self.status_label.config(text=f"ƒê√£ k·∫øt n·ªëi tr√™n {port}")
                    print(f"Connected to Arduino on {port}")
                    
                    # T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu gi√°m s√°t sau khi k·∫øt n·ªëi th√†nh c√¥ng
                    self.start_monitoring() 
                    return True
                except serial.SerialException as e:
                    print(f"Failed to connect on {port}: {e}")
                    continue
            self.status_label.config(text="K·∫øt n·ªëi th·∫•t b·∫°i - Ki·ªÉm tra Arduino")
            print("Failed to connect to Arduino.")
            return False
        except Exception as e:
            print(f"Serial connection error: {e}")
            self.status_label.config(text="L·ªói Serial - Ki·ªÉm tra k·∫øt n·ªëi")
            return False

    def start_monitoring(self):
        if self.serial_connection and self.serial_connection.is_open:
            if not self.is_running: # Ch·ªâ b·∫Øt ƒë·∫ßu n·∫øu ch∆∞a ch·∫°y
                self.is_running = True
                self.start_button.config(state=tk.DISABLED)
                self.stop_button.config(state=tk.NORMAL)
                self.status_label.config(text="ƒêang gi√°m s√°t... (Ngu·ªìn: Arduino)")
                self.reading_thread = threading.Thread(target=self.read_serial_data, daemon=True)
                self.reading_thread.start()
                self.last_log_time = time.time() # Reset ƒë·ªìng h·ªì log
                print("Monitoring started.")
        else:
            self.status_label.config(text="Kh√¥ng t√¨m th·∫•y c·∫£m bi·∫øn! H√£y k·∫øt n·ªëi l·∫°i.")
            print("Monitoring start failed: No serial connection.")

    def stop_monitoring(self):
        self.is_running = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.status_label.config(text="ƒê√£ d·ª´ng gi√°m s√°t.")
        print("Monitoring stopped.")

    def read_serial_data(self):
        while self.is_running and self.serial_connection and self.serial_connection.is_open:
            try:
                if self.serial_connection.in_waiting > 0:
                    line = self.serial_connection.readline().decode('utf-8', errors='ignore').strip()
                    if not line: continue
                    
                    # === S·ª¨A L·ªñI: ƒê√É T·∫ÆT TH√îNG B√ÅO DEBUG ===
                    # print(f"Raw serial data: {line}") 
                    
                    try:
                        voltage_mV, turbidity = self.parse_serial_line(line)
                        self.update_gui(voltage_mV, turbidity)
                    except ValueError as e:
                        # B·ªè qua c√°c d√≤ng kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c (nh∆∞ c√°c d√≤ng setup c·ªßa Arduino)
                        
                        # === S·ª¨A L·ªñI: ƒê√É T·∫ÆT TH√îNG B√ÅO DEBUG ===
                        # print(f"L·ªói ph√¢n t√≠ch d·ªØ li·ªáu (b·ªè qua): {e} -- line: {line}")
                        pass
            except serial.SerialException as e:
                print(f"L·ªói ƒë·ªçc serial (M·∫•t k·∫øt n·ªëi?): {e}")
                self.status_label.config(text="M·∫•t k·∫øt n·ªëi c·∫£m bi·∫øn!")
                self.stop_monitoring()
                self.connect_button.config(state=tk.NORMAL) # Cho ph√©p k·∫øt n·ªëi l·∫°i
                break # Tho√°t kh·ªèi v√≤ng l·∫∑p ƒë·ªçc
            except Exception as e:
                print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc: {e}")
                time.sleep(1)

    def parse_serial_line(self, line: str):
        # H√†m n√†y ƒë√£ chu·∫©n, kh√¥ng c·∫ßn thay ƒë·ªïi
        line = line.replace("V√¥n", "VOLTAGE").replace("ƒê·ªô ƒë·ª•c", "TURBIDITY")
        
        # Ch·ªâ t√¨m d√≤ng c√≥ c·∫£ VOLTAGE v√† TURBIDITY
        if "VOLTAGE" not in line or "TURBIDITY" not in line:
            raise ValueError("D√≤ng kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá")
            
        turb_match = re.search(r"TURBIDITY\s*[:=]\s*([-+]?\d*\.?\d+)", line, re.IGNORECASE)
        if not turb_match: raise ValueError("Kh√¥ng t√¨m th·∫•y TURBIDITY")
        
        turbidity = float(turb_match.group(1))
        
        volt_match = re.search(r"VOLT(?:AGE)?\s*[:=]\s*([-+]?\d*\.?\d+)\s*(mV|v)?", line, re.IGNORECASE)
        if not volt_match: raise ValueError("Kh√¥ng t√¨m th·∫•y VOLTAGE")
        
        volt_val = float(volt_match.group(1))
        volt_unit = volt_match.group(2)
        
        # Logic ph√°t hi·ªán ƒë∆°n v·ªã (mV hay V)
        voltage_mV = volt_val
        if volt_unit and volt_unit.lower() == 'v':
            voltage_mV = volt_val * 1000.0
        elif not volt_unit and abs(volt_val) < 100: # Gi·∫£ ƒë·ªãnh n·∫øu s·ªë qu√° nh·ªè (<100) th√¨ ƒë√≥ l√† Volt
            voltage_mV = volt_val * 1000.0
        
        return float(voltage_mV), float(turbidity)

    def update_gui(self, voltage, turbidity):
        def _update():
            self.voltage_label.config(text=f"{(voltage / 1000.0):.3f} V")
            
            # L·∫•y tr·∫°ng th√°i v√† bootstyle t∆∞∆°ng ·ª©ng
            status, status_bootstyle = self.get_water_status_bootstyle(turbidity)
            
            # C·∫≠p nh·∫≠t nh√£n tr·∫°ng th√°i v·ªõi m√†u t∆∞∆°ng ·ª©ng
            self.water_status_label.config(text=status, bootstyle=status_bootstyle)
            
            # L·∫•y m√†u hex t·ª´ bootstyle ƒë·ªÉ c·∫≠p nh·∫≠t ch·ªâ b√°o canvas
            color_map = {
                'success': '#00bc8c',
                'info': '#3498db',
                'warning': '#f39c12',
                'danger': '#e74c3c'
            }
            indicator_color = color_map.get(status_bootstyle, '#6B7280')
            
            # C·∫≠p nh·∫≠t m√†u ch·∫•m ch·ªâ b√°o
            self.status_indicator.itemconfig(self.status_indicator_circle, fill=indicator_color)
            
            # C·∫≠p nh·∫≠t Meter v·ªõi gi√° tr·ªã v√† m√†u t∆∞∆°ng ·ª©ng
            self.turbidity_gauge.configure(amountused=turbidity, bootstyle=status_bootstyle)
            
            # L∆∞u m·∫´u cho ph√¢n t√≠ch xu h∆∞·ªõng
            self.recent_samples.append((time.time(), turbidity))

            # C·∫£nh b√°o t·ªëc ƒë·ªô thay ƒë·ªïi ng·∫Øn h·∫°n (1 ph√∫t): d·ª± b√°o v·∫•n ƒë·ªÅ tr∆∞·ªõc khi v∆∞·ª£t ng∆∞·ª°ng cao
            try:
                now_ts = time.time()
                cutoff_short = now_ts - self.RATE_WINDOW_SEC
                short_window = [s for s in self.recent_samples if s[0] >= cutoff_short]
                if len(short_window) >= max(2, self.RATE_MIN_POINTS):
                    t0s = short_window[0][0]
                    ts2 = [(w[0] - t0s) / 60.0 for w in short_window]  # ph√∫t
                    ys2 = [w[1] for w in short_window]
                    mean_t2 = sum(ts2) / len(ts2)
                    mean_y2 = sum(ys2) / len(ys2)
                    denom2 = sum((t - mean_t2) ** 2 for t in ts2) or 1e-9
                    slope2 = sum((t - mean_t2) * (y - mean_y2) for t, y in zip(ts2, ys2)) / denom2
                    delta2 = ys2[-1] - ys2[0]
                    dur2 = max(1e-6, ts2[-1] - ts2[0])
                    if slope2 >= self.RATE_ALERT_SLOPE and delta2 >= self.RATE_MIN_DELTA:
                        if (now_ts - self.last_rate_alert_at) >= self.RATE_ALERT_COOLDOWN_SEC:
                            self.last_rate_alert_at = now_ts
                            try:
                                self.send_notification(
                                    f"üìà Trend Warning: Water is getting cloudy fast! ~{slope2:.0f} NTU/min (Œî{delta2:.1f} NTU/{dur2:.1f} min)",
                                    skip_cooldown=True,
                                )
                            except Exception:
                                pass
            except Exception:
                pass

            # G·ª≠i Telegram m·ªói khi tr·∫°ng th√°i thay ƒë·ªïi (kh√¥ng gi·ªõi h·∫°n t·∫ßn su·∫•t)
            if not hasattr(self, 'last_status_sent'):
                self.last_status_sent = None
            if status != self.last_status_sent:
                try:
                    self.send_notification(f"Tr·∫°ng th√°i thay ƒë·ªïi: {status} ‚Äî {turbidity:.2f} NTU", skip_cooldown=True)
                except Exception:
                    pass
                self.last_status_sent = status

            # Logic C·∫£nh b√°o ƒêa c·∫•p
            new_alert_level = 0
            if turbidity > 100: new_alert_level = 3
            elif turbidity > 50: new_alert_level = 2
            elif turbidity > 10: new_alert_level = 1
            
            if new_alert_level > self.current_alert_level:
                # T·∫Øt t·∫•t c·∫£ popup: kh√¥ng hi·ªán th√¥ng b√°o ·ªü m·ªçi m·ª©c c·∫£nh b√°o
                self.current_alert_level = new_alert_level
                # G·ª≠i l·ªánh t·ªõi Arduino khi v∆∞·ª£t m·ª©c r·∫•t ƒë·ª•c
                if new_alert_level >= 3:
                    self.send_serial_command('A')
                    self.send_notification(f"C·∫£nh b√°o: ƒê·ªô ƒë·ª•c r·∫•t cao ({turbidity:.2f} NTU)")
            elif new_alert_level == 0 and self.current_alert_level > 0:
                self.current_alert_level = 0
                print("Tr·∫°ng th√°i c·∫£nh b√°o ƒë√£ reset (n∆∞·ªõc trong tr·ªü l·∫°i).")
                # C√≥ th·ªÉ g·ª≠i l·ªánh t·∫Øt n·∫øu mu·ªën
                self.send_serial_command('S')

            # C·∫≠p nh·∫≠t Bi·ªÉu ƒë·ªì
            self.turbidity_data.append(turbidity)
            self.timestamps.append(datetime.now().strftime("%H:%M:%S"))
            if len(self.turbidity_data) > 50:
                self.turbidity_data = self.turbidity_data[-50:]
                self.timestamps = self.timestamps[-50:]
            
            self.line.set_data(range(len(self.turbidity_data)), self.turbidity_data)

            # V·∫Ω overlay Xu h∆∞·ªõng (g·∫•p kh√∫c) v·ªõi h·ªìi quy tuy·∫øn t√≠nh lƒÉn (rolling)
            try:
                cutoff = time.time() - self.TREND_LINE_WINDOW_SEC
                window = [s for s in self.recent_samples if s[0] >= cutoff]
                if len(window) >= 2:
                    t0 = window[0][0]
                    ts = [(w[0] - t0) / 60.0 for w in window]  # ph√∫t
                    ys = [w[1] for w in window]
                    roll_min = max(0.1, self.TREND_ROLLING_WINDOW_SEC / 60.0)  # ph√∫t
                    y_fit_series = []
                    for i in range(len(ts)):
                        # Ch·ªçn ƒëo·∫°n con trong (ts[i] - roll_min, ts[i])
                        left_t = ts[i] - roll_min
                        sub_t = [t for t in ts[: i + 1] if t >= left_t]
                        sub_y = ys[len(ts[: i + 1]) - len(sub_t) : i + 1]
                        if len(sub_t) >= 2:
                            mt = sum(sub_t) / len(sub_t)
                            my = sum(sub_y) / len(sub_y)
                            den = sum((t - mt) ** 2 for t in sub_t) or 1e-9
                            sl = sum((t - mt) * (y - my) for t, y in zip(sub_t, sub_y)) / den
                            itc = my - sl * mt
                            y_fit_series.append(sl * ts[i] + itc)
                        else:
                            # Fallback: d√πng gi√° tr·ªã th·ª±c ho·∫∑c b·∫£n sao gi√° tr·ªã tr∆∞·ªõc ƒë√≥ ƒë·ªÉ n·ªëi m∆∞·ª£t
                            y_fit_series.append(y_fit_series[-1] if y_fit_series else ys[i])

                    tail_n = min(len(window), len(self.turbidity_data))
                    x_start = max(0, len(self.turbidity_data) - tail_n)
                    x_idx = list(range(x_start, len(self.turbidity_data)))
                    self.trend_line.set_data(x_idx, y_fit_series[-tail_n:])
                else:
                    self.trend_line.set_data([], [])
            except Exception:
                self.trend_line.set_data([], [])
            
            if len(self.turbidity_data) > 1:
                tick_skip = max(1, len(self.turbidity_data) // 5)
                self.ax.set_xticks(range(0, len(self.turbidity_data), tick_skip))
                self.ax.set_xticklabels(self.timestamps[::tick_skip], rotation=30, ha='right')
            else:
                self.ax.set_xticks([])
                self.ax.set_xticklabels([])
                
            self.ax.relim()
            self.ax.autoscale_view(True, True)
            self.figure.tight_layout()
            self.canvas_graph.draw()

            # Ghi log m·ªói l·∫ßn c·∫≠p nh·∫≠t ƒë·ªÉ ƒë·ªìng b·ªô th·ªùi gian th·ª±c v·ªõi app mobile
            current_time = time.time()
            self.log_to_db(voltage, turbidity, status)
            self.last_turbidity = turbidity
            self.last_voltage = voltage
            self.last_log_time = current_time

            # Ph√°t hi·ªán xu h∆∞·ªõng tƒÉng nhanh
            try:
                if self.is_trend_rising():
                    self.send_notification(f"C·∫£nh b√°o xu h∆∞·ªõng: ƒê·ªô ƒë·ª•c ƒëang tƒÉng nhanh (>{self.TREND_ALERT_SLOPE:.0f} NTU/ph√∫t)")
                    self.send_serial_command('A')
            except Exception:
                pass

        # ƒê·∫£m b·∫£o GUI c·∫≠p nh·∫≠t tr√™n lu·ªìng ch√≠nh
        if self.root.winfo_exists():
            self.root.after(0, _update)

    def periodic_log(self):
        if self.is_running and self.last_turbidity is not None:
            current_time = time.time()
            if (current_time - self.last_log_time) >= self.log_interval:
                # print(f"Logging (periodic) do ƒë√£ qua 1 gi·ªù: {self.last_turbidity:.2f} NTU") # ƒê√£ t·∫Øt debug
                status, _ = self.get_water_status_bootstyle(self.last_turbidity)
                self.log_to_db(self.last_voltage, self.last_turbidity, status)
                self.last_log_time = current_time

        if self.root.winfo_exists():
            self.root.after(10000, self.periodic_log) # Ki·ªÉm tra m·ªói 10 gi√¢y

    # ====== C·∫•u h√¨nh Telegram (.env) ======
    def load_env_settings(self):
        # ∆Øu ti√™n ƒë·ªçc t·ª´ .env; n·∫øu kh√¥ng c√≥ th√¨ d√πng os.environ
        token, chat = None, None
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, "r", encoding="utf-8") as f:
                    for line in f:
                        line = line.strip()
                        if not line or line.startswith('#'):
                            continue
                        if '=' in line:
                            k, v = line.split('=', 1)
                            k = k.strip()
                            v = v.strip().strip('"').strip("'")
                            if k == 'TELEGRAM_BOT_TOKEN':
                                token = v
                            elif k == 'TELEGRAM_CHAT_ID':
                                chat = v
            except Exception as e:
                print(f"L·ªói ƒë·ªçc .env: {e}")
        # Fallback sang bi·∫øn m√¥i tr∆∞·ªùng n·∫øu .env kh√¥ng c√≥
        token = token or os.environ.get('TELEGRAM_BOT_TOKEN')
        chat = chat or os.environ.get('TELEGRAM_CHAT_ID')
        self.telegram_token = token
        self.telegram_chat_id = chat
        # ƒê·ªìng b·ªô l·∫°i v√†o os.environ cho phi√™n hi·ªán t·∫°i
        if token:
            os.environ['TELEGRAM_BOT_TOKEN'] = token
        if chat:
            os.environ['TELEGRAM_CHAT_ID'] = chat

    # H√†m ti·ªán √≠ch m·ªõi: tr·∫£ v·ªÅ (status_text, bootstyle_name)
    def get_water_status_bootstyle(self, turbidity):
        if turbidity < 1: return "N∆∞·ªõc c·∫•t", "success"
        elif turbidity <= 10: return "N∆∞·ªõc trong", "info"
        elif turbidity <= 50: return "N∆∞·ªõc h∆°i ƒë·ª•c", "warning"
        elif turbidity <= 100: return "N∆∞·ªõc ƒë·ª•c", "danger"
        else: return "N∆∞·ªõc r·∫•t ƒë·ª•c", "danger"

    # H√†m get_water_status c≈© (kh√¥ng c√≤n d√πng)
    # def get_water_status(self, turbidity): ...
        
    def init_db(self):
        try:
            conn = sqlite3.connect(self.DB_PATH)
            cur = conn.cursor()
            cur.execute(
                """
                CREATE TABLE IF NOT EXISTS readings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    ts TEXT NOT NULL,
                    voltage REAL,
                    turbidity REAL,
                    status TEXT,
                    source TEXT
                )
                """
            )
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"L·ªói kh·ªüi t·∫°o DB: {e}")

    def log_to_db(self, voltage, turbidity, status):
        try:
            ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            conn = sqlite3.connect(self.DB_PATH)
            cur = conn.cursor()
            cur.execute(
                "INSERT INTO readings (ts, voltage, turbidity, status, source) VALUES (?, ?, ?, ?, ?)",
                (ts, round(voltage, 0), round(turbidity, 2), status, "Arduino Uno")
            )
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"L·ªói ghi DB: {e}")

    def is_trend_rising(self):
        # Compute slope over last TREND_WINDOW_SEC seconds
        if len(self.recent_samples) < 2:
            return False
        cutoff = time.time() - self.TREND_WINDOW_SEC
        window = [s for s in self.recent_samples if s[0] >= cutoff]
        if len(window) < 2:
            return False
        ntu_start = window[0][1]
        ntu_end = window[-1][1]
        dt_min = max(1e-6, (window[-1][0] - window[0][0]) / 60.0)
        slope = (ntu_end - ntu_start) / dt_min
        return slope >= self.TREND_ALERT_SLOPE

    def send_serial_command(self, cmd: str):
        # Avoid spamming; send at most once per 10s per type
        now = time.time()
        if self.serial_connection and self.serial_connection.is_open:
            if self.last_command_type != cmd or (now - self.last_command_sent_at) >= 10:
                try:
                    self.serial_connection.write(cmd.encode('utf-8'))
                    self.last_command_type = cmd
                    self.last_command_sent_at = now
                except Exception as e:
                    print(f"L·ªói g·ª≠i l·ªánh t·ªõi Arduino: {e}")

    def send_notification(self, message: str, skip_cooldown: bool = False):
        # Telegram via env vars TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID
        token = os.environ.get("TELEGRAM_BOT_TOKEN")
        chat_id = os.environ.get("TELEGRAM_CHAT_ID")
        now = time.time()
        if not token or not chat_id:
            return
        if (not skip_cooldown) and (now - self.last_notify_at) < self.TELEGRAM_MIN_INTERVAL_SEC:
            return
        try:
            api_url = f"https://api.telegram.org/bot{token}/sendMessage"
            params = urlencode({
                "chat_id": chat_id,
                "text": message
            }).encode("utf-8")
            req = urllib.request.Request(api_url, data=params)
            # SSL context: d√πng certifi n·∫øu c√≥; c√≥ th·ªÉ b·∫≠t b·ªè qua verify qua env var (kh√¥ng khuy·∫øn ngh·ªã)
            insecure_skip = os.environ.get("TELEGRAM_INSECURE_SKIP_VERIFY") == "1"
            if insecure_skip:
                print("[C·∫£nh b√°o] ƒêang b·ªè qua x√°c th·ª±c SSL (TELEGRAM_INSECURE_SKIP_VERIFY=1). Ch·ªâ s·ª≠ d·ª•ng t·∫°m th·ªùi ƒë·ªÉ ki·ªÉm tra.")
                context = ssl._create_unverified_context()
            else:
                context = ssl.create_default_context()
                if HAS_CERTIFI:
                    try:
                        context.load_verify_locations(certifi.where())
                    except Exception:
                        pass

            with urllib.request.urlopen(req, context=context, timeout=10) as resp:
                _ = resp.read()
            self.last_notify_at = now
        except Exception as e:
            err = str(e)
            print(f"G·ª≠i Telegram th·∫•t b·∫°i: {e}")
            if "CERTIFICATE_VERIFY_FAILED" in err.upper():
                print("\nG·ª£i √Ω kh·∫Øc ph·ª•c SSL:\n- N·∫øu ƒëang ·ªü m·∫°ng c√¥ng ty/proxy, h√£y c√†i ch·ª©ng ch·ªâ CA n·ªôi b·ªô v√†o Windows Trusted Root.\n- Ho·∫∑c c√†i certifi: pip install certifi (·ª©ng d·ª•ng s·∫Ω t·ª± d√πng certifi n·∫øu c√≥).\n- Ho·∫∑c ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng SSL_CERT_FILE ho·∫∑c REQUESTS_CA_BUNDLE tr·ªè t·ªõi file CA bundle.\n- Ch·ªâ ƒë·ªÉ test t·∫°m th·ªùi: set TELEGRAM_INSECURE_SKIP_VERIFY=1 (kh√¥ng khuy·∫øn ngh·ªã d√πng l√¢u d√†i).\n")

    def on_closing(self):
        print("Closing application...")
        self.stop_monitoring()
        if self.serial_connection and self.serial_connection.is_open:
            self.serial_connection.close()
            print("Serial connection closed.")
        self.root.destroy()

def main():
    # S·ª≠ d·ª•ng b.Window v·ªõi themename='darkly'
    root = b.Window(themename='darkly')
    app = TurbiditySensorGUI(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing) # X·ª≠ l√Ω khi nh·∫•n n√∫t X
    root.mainloop()

if __name__ == "__main__":
    main()